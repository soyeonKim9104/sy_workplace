{"id":"html/canvas_iphone.html","dependencies":[{"name":"_css_loader","parent":"D:\\mywork\\kpi\\sy_workplace\\html\\canvas_iphone.html","resolved":"D:\\mywork\\kpi\\sy_workplace\\node_modules\\parcel-bundler\\src\\builtins\\css-loader.js"},{"name":"D:\\mywork\\kpi\\sy_workplace\\package.json","includedInParent":true,"mtime":1574216216875}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>iPhoneX visual</title>\r\n    <style>body{background:black;}\r\n        #cover-canvas{\r\n            position:fixed;\r\n            top:0;\r\n            left:0;\r\n        }\r\n        .video-wrapper{\r\n            display:flex;\r\n            justify-content:center;\r\n            align-items:center;\r\n            overflow:hidden;\r\n            position:fixed;\r\n            top:0;\r\n            left:0;\r\n            width:100vw;\r\n            height:100vh;\r\n        }\r\n        #video{\r\n            transform:scale(1);\r\n        }</style>\r\n</head>\r\n<body>\r\n    <div class=\"video-wrapper\">\r\n        <video muted=\"\" playsinline=\"\" loop=\"\" autoplay=\"\" src=\"https://images.apple.com/media/us/iphone-x/2017/01df5b43-28e4-4848-bf20-490c34a926a7/overview/primary/hero/large_2x.mp4\" id=\"video\"></video>\r\n    </div>\r\n    <canvas id=\"cover-canvas\"></canvas>\r\n\r\n<script>'use strict';\n\n(function () {\n  var elemCanvas,\n      elemVideo,\n      elemPhone,\n      context,\n      windowWidth = 0,\n      // 브러우저  width\n  windowHeight = 0,\n      // 브라우저 height\n  canvasWidth = 0,\n      // 캔버스 폭\n  canvasHeight = 0,\n      // 캔버스 높이\n  scrollY = 0,\n      // 현재 스크롤 위치\n  relativeScrollY = 0,\n      // 각 키프레임에서 사용하는 상대적인 스크롤 위치\n  totalScrollHeight = 0,\n      // 스크롤 할수 있는 전체 높이\n  currentKeyframe = 0,\n      // 현재 키프레임 (0, 1)\n  phoneWidth = 1350,\n      // 아이폰 이미지 기본 크기 basic - 1380\n  phoneHeight = 2970,\n      // 아이폰 이미지 기본 크기 basic - 3000\n  resizeHandler,\n      scrollHandler,\n      render,\n      drawCanvas,\n      calcAnimationValue,\n      init,\n      pixelDuration = 0,\n      // 키프렘임 당 차지하는 스크롤 높이\n  prevDurations = 0,\n      keyframes = [{\n    animationValue: {\n      videoScale: [1, 2],\n      //[시작값, 애니메이션이 끝나는 값]\n      triangleMove: [0, 200],\n      rectangleMove: [0, 500]\n    }\n  }, {\n    animationValue: {\n      videoScale: [2, 0.5],\n      triangleMove: [200, 1000],\n      rectangleMove: [500, 500]\n    }\n  }],\n      elemBody = document.body,\n      elemCanvas = document.getElementById('cover-canvas');\n  context = elemCanvas.getContext('2d'); // canvas를 그릴 때 기본적으로 선언해줘야함\n\n  elemVideo = document.getElementById('video');\n\n  init = function init() {\n    windowWidth = window.innerWidth;\n    windowHeight = window.innerHeight;\n    resizeHandler();\n    render();\n    window.addEventListener('resize', function () {\n      requestAnimationFrame(resizeHandler);\n    });\n    window.addEventListener('scroll', function () {\n      requestAnimationFrame(scrollHandler);\n    });\n    elemPhone = document.createElement('img'); // canvas에서 이미지를 삽입할때 꼭 선언해야하는 명령어\n\n    elemPhone.src = '../images/iphone.png'; // 위에 명령어 입력 후 이미지 불러오기\n\n    elemPhone.addEventListener('load', function () {\n      drawCanvas();\n    });\n  };\n\n  resizeHandler = function resizeHandler() {\n    //브라우저 창 사이즈가 바뀔때,\n    var i;\n    windowWidth = window.innerWidth;\n    windowHeight = window.innerHeight;\n    totalScrollHeight = 0; //스크롤을 할 수 있는 전체 높이\n\n    pixelDuration = 0.5 * windowHeight; // Duration : 애니메이션이 지속되는 시간을 의미, 윈도의 높이 절반 설정\n\n    for (i = 0; i < keyframes.length; i++) {\n      totalScrollHeight += pixelDuration;\n    }\n\n    totalScrollHeight += windowHeight;\n    elemBody.style.height = totalScrollHeight + 'px';\n    elemCanvas.width = canvasWidth = windowWidth * 2;\n    elemCanvas.height = canvasHeight = windowHeight * 2;\n    elemCanvas.style.width = windowWidth + 'px';\n    elemCanvas.style.height = windowHeight + 'px';\n  };\n\n  scrollHandler = function scrollHandler() {\n    scrollY = window.pageYOffset; //현재 스크롤 된 위치\n    //console.log(prevDurations);\n\n    if (scrollY < 0 || scrollY > totalScrollHeight - windowHeight) {\n      return; // 함수 종료\n    }\n\n    if (scrollY > pixelDuration + prevDurations) {\n      console.log(pixelDuration);\n      console.log(prevDurations);\n      prevDurations += pixelDuration;\n      currentKeyframe++;\n    } else if (scrollY < prevDurations) {\n      prevDurations -= pixelDuration;\n      currentKeyframe--;\n    }\n\n    relativeScrollY = scrollY - prevDurations;\n    render();\n  };\n\n  render = function render() {\n    var videoScale, triangleMove, rectangleMove;\n\n    if (keyframes[currentKeyframe]) {\n      videoScale = calcAnimationValue(keyframes[currentKeyframe].animationValue.videoScale);\n      triangleMove = calcAnimationValue(keyframes[currentKeyframe].animationValue.triangleMove);\n      rectangleMove = calcAnimationValue(keyframes[currentKeyframe].animationValue.rectangleMove);\n    } else {\n      return;\n    }\n\n    elemVideo.style.transform = 'scale(' + videoScale + ')';\n    context.clearRect(0, 0, canvasWidth, canvasHeight); //clearRect = canvas 지우기\n\n    if (elemPhone) {\n      drawCanvas(videoScale, triangleMove, rectangleMove);\n    }\n  };\n\n  calcAnimationValue = function calcAnimationValue(values) {\n    return relativeScrollY / pixelDuration * (values[1] - values[0]) + values[0];\n  };\n\n  drawCanvas = function drawCanvas(videoScale, triangleMove, rectangleMove) {\n    var videoScale = videoScale || 1,\n        triangleMove = triangleMove || 0,\n        rectangleMove = rectangleMove || 0;\n    context.save();\n    context.translate((canvasWidth - phoneWidth * videoScale) * 0.5, (canvasHeight - phoneHeight * videoScale) * 0.5);\n    context.drawImage(elemPhone, 0, 0, phoneWidth * videoScale, phoneHeight * videoScale); //elemPhone : 폰이미지를 담고있는..\n\n    context.restore();\n    context.fillStyle = 'black'; //context.fillStyle = 'red'; // 색상을 먼저 선언하고 canvas를 그려야함\n    //위 삼각형\n\n    context.beginPath();\n    context.moveTo(canvasWidth * 0.5 - 1500, -triangleMove - 1700); // canvasWidth * 0.5 -> 캔버스의 중앙 위치 를 의미\n\n    context.lineTo(canvasWidth * 0.5, canvasHeight * 0.5 - 150 - triangleMove); // lineto : 실제로 그리는 선\n\n    context.lineTo(canvasWidth * 0.5 + 1500, -triangleMove - 1700);\n    context.lineTo(canvasWidth * 0.5 - 1500, -triangleMove - 1700);\n    context.fill();\n    context.closePath(); //context.fillStyle = 'blue';\n    //아래 삼각형\n\n    context.beginPath();\n    context.moveTo(canvasWidth * 0.5 - 1500, canvasHeight + triangleMove + 1700); // canvasHeight * 0.5 -> 캔버스의 중앙 위치 를 의미\n\n    context.lineTo(canvasWidth * 0.5, canvasHeight * 0.5 + 150 + triangleMove);\n    context.lineTo(canvasWidth * 0.5 + 1500, canvasHeight + triangleMove + 1700);\n    context.lineTo(canvasWidth * 0.5 - 1500, canvasHeight + triangleMove + 1700);\n    context.fill();\n    context.closePath(); //context.fillStyle = 'green';\n    // 왼쪽 삼각형\n\n    context.beginPath();\n    context.moveTo(canvasWidth * 0.5 - 1700 - triangleMove, -1700);\n    context.lineTo(canvasWidth * 0.5 - 130 - triangleMove, canvasHeight * 0.5);\n    context.lineTo(canvasWidth * 0.5 - 1700 - triangleMove, canvasHeight + 1700);\n    context.lineTo(canvasWidth * 0.5 - 1700 - triangleMove, -1700);\n    context.fill();\n    context.closePath(); //context.fillStyle = 'yellow';\n    // 오른쪽 삼각형\n\n    context.beginPath();\n    context.moveTo(canvasWidth * 0.5 + 1700 + triangleMove, -1700);\n    context.lineTo(canvasWidth * 0.5 + 130 + triangleMove, canvasHeight * 0.5);\n    context.lineTo(canvasWidth * 0.5 + 1700 + triangleMove, canvasHeight + 1700);\n    context.lineTo(canvasWidth * 0.5 + 1700 + triangleMove, -1700);\n    context.fill();\n    context.closePath(); // 박스 상, 히\n    //console.log(canvasHeight);\n\n    context.fillRect(0, canvasHeight * 0.5 - 2600 - rectangleMove, canvasWidth, 2000);\n    context.fillRect(0, canvasHeight * 0.5 + 600 + rectangleMove, canvasWidth, 2000);\n  };\n\n  init();\n})();</script>\r\n</body>\r\n</html>"},"sourceMaps":null,"error":null,"hash":"77656908b5fa0c23eb102d30c68a8b02","cacheData":{"env":{}}}